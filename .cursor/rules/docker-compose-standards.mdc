---
globs: **/compose.yml
alwaysApply: false
---

# Docker Compose Standards

**Goal:** Simple, working configs that deploy instantly with `make <service-name>`.

## Core Patterns

### 1. Image Strategy

- **Databases**: `${SERVICE_VERSION:-latest}` (postgres, redis, mysql, mongo)
- **UI Tools**: Always `:latest` (pgadmin, redis-commander, phpmyadmin)
- **Applications**: `${APP_VERSION:-latest}`

### 2. Port Strategy

- **Standard ports**: Hardcode (5432, 3306, 6379, 27017)
- **UI/Admin ports**: `${TOOL_PORT:-default}`
- **App ports**: `${APP_PORT:-8080}`

### 3. Network Strategy

**✅ USE networks for multi-service stacks:**

```yaml
# When services need to communicate (database + admin UI)
services:
  postgres:
    networks:
      - postgres
  pgadmin:
    networks:
      - postgres
networks:
  postgres:
    name: postgres
    driver: bridge
```

**❌ AVOID networks for single services:**

```yaml
# Single service - use default bridge network
services:
  single-app:
    # No networks needed
```

### 4. Essential Structure

```yaml
services:
  service-name:
    image: service:${VERSION:-latest}
    ports:
      - 5432:5432  # Standard ports hardcoded
    environment:
      SERVICE_USER: ${SERVICE_USER:-admin}
      SERVICE_PASSWORD: ${SERVICE_PASSWORD:-password}
    volumes:
      - service_data:/service/data/path
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "service-specific-command"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  service_data:
```

### 5. UI/Admin Pattern

```yaml
  admin-ui:
    image: admin-tool:latest
    ports:
      - ${ADMIN_PORT:-8080}:80
    depends_on:
      - main-service
    restart: unless-stopped
```

## Service-Specific Configuration

### Health Checks

⚠️ **Research Required**: Each service has different health check methods

1. Check official Docker Hub documentation
2. Look for built-in health check commands
3. Test with service-specific tools (pg_isready, redis-cli, etc.)
4. Use simple HTTP endpoints when available

### Volume Paths

⚠️ **Research Required**: Data persistence paths vary by service

1. Check official documentation for data directories
2. Inspect Dockerfile for VOLUME declarations
3. Test with temporary containers to verify paths
4. Avoid generic paths - use service-specific locations

## What to Include vs Avoid

### ✅ Keep Simple

- Version variables for main services
- Standard health checks
- Essential environment variables
- Basic volume mapping
- **Networks for multi-service communication**

### ❌ Avoid Complexity

- `container_name` (let Compose generate)
- **Networks when you have only ONE service**
- `pull_policy`, `expose`
- Security hardening (unless critical)
- Complex volume configurations

## File Requirements

```md
service-name/
├── compose.yml
└── README.md    # Document all env vars
```

## Quality Checklist

- [ ] Uses `${SERVICE_VERSION:-latest}` for main services
- [ ] Standard ports hardcoded, UI ports configurable
- [ ] Health check uses service-specific command
- [ ] Essential environment variables only
- [ ] **Networks used appropriately (multi-service: yes, single-service: no)**
- [ ] Works with `make service-name`
- [ ] All variables documented in README

**Philosophy:** Keep it simple, make it work.
